'''
 默认值参数
 关键字形参
 个数可变的位置参数：定义函数时，无法事先确定传递的位置参数的个数 使用*定义可变的位置形参 结果为一个元组（变量名随便起
 个数可变的关键字形参：定义函数时，无法事先确定传递的关键字实参的个数时，使用可变的关键字形参 **定义 结果为一个字典
'''
def fun(a,b=10): #b称为默认值参数
    print(a,b)

fun(100) #只传一个参数 b采用默认值
fun(20,30) # 参数替换默认值（与默认值不符才传递实参

'''
print里面就使用默认参数，默认结束为换行 但是可以用end= 进行替换
'''
print('hello',end='\t')
print('hello')


print("个数可变的位置参数--------")
def fun(*args1):
    print(args1)


fun(10) #(10,) 注意元组单个元素会用逗号区分
fun(10,20) #(10, 20)
fun(10,20,30) #(10, 20, 30)

print('hello',20,14) #写几个都行 但是个数可变的位置参数只能写一个 ↓
'''
def fun1(*arg,*aa): #程序报错 带*和**的只能写一个
    pass
def fun1(**arg,*aa): #程序报错 带*的只能写一个
    pass
'''
print("个数可变的关键字形参--------")
def fun2(**arg2):
    print(arg2)
fun2(a=10) #{'a': 10}
fun2(a=10,b=20)
fun2(a=10,b=20,c=40) #{'a': 10, 'b': 20, 'c': 40}

print("关键字形参--------")
def fun4 (a,b,*,c,d): # 单独加* 表示从*之后的参数在函数调用时只能采用关键字参数传递
    print('a=',a)
    print('b=',b)
    print('c=',c)
    print('d=',d)

# fun4(10,20,30,40) # 报错：全使用的位置形参 需求是cd只能采用关键字实参传递
fun4(a=10,b=20,c=30,d=40)
fun4(10,20,c=30,d=40)

def fun3(*arg1,**arg2): # 不报错
    pass
'''
在一个程序中；既有个数可变的关键字形参，也有个数可变的位置形参，要求位置形参放在关键字形参之前
'''
# def fun4(**arg1,*arg2): #报错

